// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model userMaster {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  avatar    String?
  employees employee[]
}

model user {
  id           Int             @id @default(autoincrement())
  name         String
  lastName     String
  password     String
  email        String          @unique
  cep          String
  city         String
  district     String
  adress       String
  numberAdress String
  complement   String
  avatar       String?
  dvlClient    dvl[]
  orders       Order[]
  library      library_teste[]
  vote         Cover[]
}

model employee {
  id           Int         @id @default(autoincrement())
  name         String
  email        String      @unique
  password     String
  profession   String
  phone        String
  avatar       String?
  userMaster   userMaster? @relation(fields: [userMasterId], references: [id])
  userMasterId Int?
  magazines    magazine[]
}

model magazine {
  id            Int          @id @default(autoincrement())
  name          String
  author        String
  cover         String[]
  company       String
  volume        String
  views         Int?         @default(0)
  description   String
  capa_name     String?
  price         Float
  magazine_pdf  String
  createDate    DateTime     @default(now())
  updateAt      DateTime     @default(now())
  article       article[]
  SubCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int?
  Category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  employees     employee[]
}

model article {
  id            Int          @id @default(autoincrement())
  name          String
  cover         String
  volume        String
  capa_name     String?
  views         Int?         @default(0)
  author        String
  description   String
  articlepdf    String
  status        String
  createDate    DateTime     @default(now())
  updateAt      DateTime     @default(now())
  magazine      magazine?    @relation(fields: [magazineId], references: [id])
  magazineId    Int?
  company       String?
  price         Float?
  Category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  SubCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int?
}

model Category {
  id          Int             @id @default(autoincrement())
  name        String
  createDate  DateTime        @default(now())
  updateAt    DateTime        @default(now())
  article     article[]
  magazine    magazine[]
  subcategory SubCategory[]
  library     library_teste[]
}

model SubCategory {
  id          Int        @id @default(autoincrement())
  name        String
  category    Category   @relation(fields: [categoriaId], references: [id])
  categoriaId Int
  magazine    magazine[]
  createDate  DateTime   @default(now())
  updateAt    DateTime   @default(now())
  article     article[]
  articleId   Int?
}

model dvl {
  id        Int     @id @default(autoincrement())
  name      String
  price     Int?
  picture   String?
  paidOut   Int
  toReceive Int
  user      user?   @relation(fields: [userId], references: [id])
  userId    Int?
}

model Order {
  id         Int      @id @default(autoincrement())
  items      Json[]
  createDate DateTime @default(now())
  updateAt   DateTime @default(now())
  user       user?    @relation(fields: [userId], references: [id])
  userId     Int?
  status     Status   @default(andamento)
  codeEnv    String?
}

model Libray {
  id       Int                @id @default(autoincrement())
  magazine Library_magazine[]
  articles Json[]
}

model library_teste {
  id           Int       @id @default(autoincrement())
  name         String
  author       String
  cover        String[]
  magazine_pdf String
  Category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  user         user?     @relation(fields: [userId], references: [id])
  userId       Int?
  
}

model Library_magazine {
  id           Int      @id @default(autoincrement())
  name         String
  author       String
  cover        String[]
  magazine_pdf String
  Libray       Libray?  @relation(fields: [librayId], references: [id])
  librayId     Int?
}

enum Status {
  andamento
  enviado
  entregue
}

model Event {
  id         Int     @id @default(autoincrement())
  name       String
  cover      Cover[]
  date_event String?
}

model Cover {
  id        Int    @id @default(autoincrement())
  name      String
  cover     String
  Event     Event? @relation(fields: [eventId], references: [id])
  eventId   Int?
  countLike Int?   @default(0)
  user      user?  @relation(fields: [userId], references: [id])
  userId    Int?
}

model Banner {
  id    Int    @id @default(autoincrement())
  name  String
  cover String
}
